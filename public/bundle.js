(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DomBuilder = _interopRequireDefault(require("./DomBuilder"));

var _InterestData = _interopRequireDefault(require("./InterestData"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DOMappend = {
  appendToDOM() {
    _InterestData.default.getAllInterest().then(interests => {
      let placesContainer = document.querySelector(".output");
      let interestFrag = document.createDocumentFragment();
      interests.forEach(interest => {
        // console.log(interests)
        let interestHTML = _DomBuilder.default.interestDom(interest);

        interestFrag.appendChild(interestHTML);
      });

      while (placesContainer.firstChild) {
        placesContainer.removeChild(placesContainer.firstChild);
      }

      placesContainer.appendChild(interestFrag);
    });
  }

};
var _default = DOMappend;
exports.default = _default;

},{"./DomBuilder":2,"./InterestData":3}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InterestData = _interopRequireDefault(require("./InterestData"));

var _eventListener = _interopRequireDefault(require("./eventListener"));

var _DomAppend = _interopRequireDefault(require("./DomAppend"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interestBuilder = {
  pageLoad() {
    let outputContainer = document.querySelector(".input");
    outputContainer.innerHTML = "";
    let interestFormContainer = document.createElement("container");
    interestFormContainer.classList.add("interestContainerForm");
    interestFormContainer.innerHTML = "<h2 class='interestFormHeader'>Add Your Interest</h2>";
    outputContainer.appendChild(interestFormContainer);
    let placeContainer = document.createElement("container");
    placeContainer.classList.add("placesContainer");
    outputContainer.appendChild(placeContainer);

    _DomAppend.default.appendToDOM();
  },

  interestFormCreater() {
    _InterestData.default.getPlaces().then(places => {
      let interestForm = document.createElement("div");
      interestForm.classList.add("interestForm");
      let interestFormContainer = document.querySelector(".interestContainerForm");
      interestFormContainer.appendChild(interestForm);
      let interestNameInput = document.createElement("input");
      let interestNameLabel = document.createElement("label");
      interestNameLabel.textContent = "Interest Name:";
      interestNameInput.setAttribute("type", "text");
      interestNameInput.classList.add("interestName");
      interestForm.appendChild(interestNameLabel);
      interestForm.appendChild(interestNameInput);
      let interestDescriptionInput = document.createElement("input");
      let interestDescriptionLabel = document.createElement("label");
      interestDescriptionLabel.setAttribute("type", "text");
      interestDescriptionInput.classList.add("interestDescription");
      interestDescriptionLabel.textContent = "Description:";
      interestForm.appendChild(interestDescriptionLabel);
      interestForm.appendChild(interestDescriptionInput);
      let costInput = document.createElement("input");
      let costLabel = document.createElement("label");
      costInput.classList.add("interestCost");
      costLabel.setAttribute("type", "text");
      costLabel.textContent = "Cost:";
      interestForm.appendChild(costLabel);
      interestForm.appendChild(costInput);
      let placeDropDown = document.createElement("select");
      placeDropDown.setAttribute("id", "mySelect");
      let LondonOption = document.createElement("option");
      LondonOption.setAttribute("value", `${places[0].id}`);
      LondonOption.textContent = `${places[0].name}`;
      let parisOptions = document.createElement("option");
      parisOptions.setAttribute("value", `${places[1].id}`);
      parisOptions.textContent = `${places[1].name}`;
      let berlinOptions = document.createElement("option");
      berlinOptions.setAttribute("value", `${places[2].id}`);
      berlinOptions.textContent = `${places[2].name}`;
      placeDropDown.appendChild(LondonOption);
      placeDropDown.appendChild(parisOptions);
      placeDropDown.appendChild(berlinOptions);
      interestForm.appendChild(placeDropDown);
      let interestSaveButton = document.createElement("button");
      interestSaveButton.setAttribute("class", "interestSaveButton");
      interestSaveButton.textContent = "save";
      interestForm.appendChild(interestSaveButton);
      interestSaveButton.addEventListener("click", _eventListener.default.interestSave);
    });
  },

  interestDom(value) {
    // console.log(value)
    let interestContainer = document.createElement("container");
    interestContainer.setAttribute("id", `interest--${value.id}`); // let place = document.createElement("h2")
    // place.innerHTML = `Place: <p>${value.name}</p>`
    // interestContainer.appendChild(place)

    let name = document.createElement("h3");
    name.innerHTML = `name: <p>${value.name}</p>`;
    interestContainer.appendChild(name);
    let description = document.createElement("h3");
    description.innerHTML = `description: <p>${value.description}</p>`;
    interestContainer.appendChild(description);
    let cost = document.createElement("p");
    cost.innerHTML = `cost: <p>${value.cost}</p>`;
    interestContainer.appendChild(cost);
    let placeId = document.createElement("p");
    placeId.innerHTML = `place: <p> ${value.placeId}`;
    interestContainer.appendChild(placeId);
    let interestEditButton = document.createElement("button");
    interestEditButton.innerText = "Edit";
    interestEditButton.setAttribute("id", `interestedit--${value.id}`);
    let interestDeleteButton = document.createElement("button");
    interestDeleteButton.innerText = "Delete";
    interestDeleteButton.setAttribute("id", `interest--${value.id}`);
    interestContainer.classList.add("interestContainer");
    interestDeleteButton.addEventListener("click", _eventListener.default.deletePrompt);
    interestContainer.appendChild(interestEditButton);
    interestContainer.appendChild(interestDeleteButton);
    let breakTag = document.createElement("hr");
    interestContainer.appendChild(breakTag);

    _InterestData.default.getAllInterest().then(() => {
      interestEditButton.addEventListener("click", () => {
        interestBuilder.interestEditForm(IDBCursorWithValue);
      });
    });

    return interestContainer;
  },

  interestEditForm() {
    let interestEditId = event.target.id;
    let interestId = interestEditId.split("--")[1];
    let costEditfield = document.createElement("input");
    costEditfield.setAttribute("type", "text");
    costEditfield.classList.add("costEditField");
    let costEditLabel = document.createElement("label");
    costEditLabel.textContent = "cost:";
    let reviewEditField = document.createElement("input");
    reviewEditField.setAttribute("type", "text");
    reviewEditField.classList.add("reviewEditField");
    let reviewEditLabel = document.createElement("label");
    reviewEditLabel.textContent = "Edit review:";
    let saveButton = document.createElement("button");
    saveButton.textContent = "Save";

    _InterestData.default.getInterest(interestId).then(interestId => {
      console.log(interestId);
      let costEdit = document.querySelector(".costEditField").value;
      let reviewEdit = document.querySelector(".reviewEditField").value;
      saveButton.addEventListener("click", () => {
        let costId = interestId.cost;
        let descriptionId = interestId.description;
        let placeId = interestId.placeId;
        let name = interestId.name;
        let editedInterest = {
          placeId: placeId,
          name: name,
          description: descriptionId,
          cost: costId
        };

        _InterestData.default.editInterest(interestsId, editedInterest).then(() => {
          DOMEappend.appendToDom();
        });
      });
    });

    let interestContainer = document.querySelector(`#interest--${interestId}`);
    interestContainer.appendChild(costEditLabel);
    interestContainer.appendChild(costEditfield);
    interestContainer.appendChild(reviewEditLabel);
    interestContainer.appendChild(reviewEditField);
    interestContainer.appendChild(saveButton);
  }

};
var _default = interestBuilder;
exports.default = _default;

},{"./DomAppend":1,"./InterestData":3,"./eventListener":4}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const data = {
  getPlaces() {
    return fetch("http://localhost:8088/places").then(response => response.json());
  },

  postInterest(object) {
    return fetch("http://localhost:8088/interests", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(object)
    });
  },

  getAllInterest() {
    return fetch("http://localhost:8088/interests/").then(response => response.json());
  },

  deleteInterest(interestId) {
    return fetch(`http://localhost:8088/interests/${interestId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  getInterest(id) {
    return fetch(`http://localhost:8088/interests/${id}`).then(response => response.json());
  },

  editInterest(id, description) {
    return fetch(`http://localhost:8088/interests/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(description)
    });
  }

};
var _default = data;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InterestData = _interopRequireDefault(require("./InterestData"));

var _DomAppend = _interopRequireDefault(require("./DomAppend"));

var _DomBuilder = _interopRequireDefault(require("./DomBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventListeners = {
  interestSave() {
    let name = document.querySelector(".interestName").value;
    let description = document.querySelector(".interestDescription").value;
    let cost = document.querySelector(".interestCost").value;
    let place = document.querySelector("#mySelect").value;
    console.log(place);
    let interestObject = {
      placeId: place,
      name: name,
      description: description,
      cost: cost
    };

    _InterestData.default.postInterest(interestObject).then(() => {
      _DomAppend.default.appendToDOM();
    });
  },

  interestDelete() {
    let InterestDeleteId = event.target.id.split("--")[1];

    _InterestData.default.deleteInterest(InterestDeleteId).then(() => {
      _DomBuilder.default.pageLoad();

      _DomBuilder.default.interestFormCreator();
    });
  },

  deletePrompt() {
    if (confirm("Are you sure you want to delete?")) {
      eventListeners.interestDelete();
    } else {}
  }

};
var _default = eventListeners;
exports.default = _default;

},{"./DomAppend":1,"./DomBuilder":2,"./InterestData":3}],5:[function(require,module,exports){
"use strict";

var _DomBuilder = _interopRequireDefault(require("./DomBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_DomBuilder.default.pageLoad();

_DomBuilder.default.interestFormCreater();

},{"./DomBuilder":2}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9zY3JpcHRzL0RvbUFwcGVuZC5qcyIsIi4uL3NjcmlwdHMvRG9tQnVpbGRlci5qcyIsIi4uL3NjcmlwdHMvSW50ZXJlc3REYXRhLmpzIiwiLi4vc2NyaXB0cy9ldmVudExpc3RlbmVyLmpzIiwiLi4vc2NyaXB0cy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQ0FBOztBQUNBOzs7O0FBQ0EsTUFBTSxTQUFTLEdBQUc7QUFDZCxFQUFBLFdBQVcsR0FBRztBQUNWLDBCQUFLLGNBQUwsR0FDQyxJQURELENBQ08sU0FBUyxJQUFJO0FBRWhCLFVBQUksZUFBZSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLFNBQXZCLENBQXRCO0FBQ0EsVUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLHNCQUFULEVBQW5CO0FBQ0EsTUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixRQUFRLElBQUk7QUFDMUI7QUFDQSxZQUFJLFlBQVksR0FBRyxvQkFBZ0IsV0FBaEIsQ0FBNEIsUUFBNUIsQ0FBbkI7O0FBQ0EsUUFBQSxZQUFZLENBQUMsV0FBYixDQUF5QixZQUF6QjtBQUNILE9BSkQ7O0FBS0EsYUFBTyxlQUFlLENBQUMsVUFBdkIsRUFBbUM7QUFDL0IsUUFBQSxlQUFlLENBQUMsV0FBaEIsQ0FBNEIsZUFBZSxDQUFDLFVBQTVDO0FBQ0g7O0FBQ0QsTUFBQSxlQUFlLENBQUMsV0FBaEIsQ0FBNEIsWUFBNUI7QUFDSCxLQWREO0FBZUg7O0FBakJhLENBQWxCO2VBc0JlLFM7Ozs7Ozs7Ozs7O0FDeEJmOztBQUNBOztBQUNBOzs7O0FBR0EsTUFBTSxlQUFlLEdBQUc7QUFDcEIsRUFBQSxRQUFRLEdBQUc7QUFDUCxRQUFJLGVBQWUsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixRQUF2QixDQUF0QjtBQUNBLElBQUEsZUFBZSxDQUFDLFNBQWhCLEdBQTRCLEVBQTVCO0FBQ0Es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SSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsZUFBdkIsRUFBd0MsS0FBbkQ7QUFDQSxRQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixXQUF2QixFQUFvQyxLQUFoRDtBQUNSLElBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxLQUFaO0FBQ1EsUUFBSSxjQUFjLEdBQUc7QUFDakIsTUFBQSxPQUFPLEVBQUUsS0FEUTtBQUVqQixNQUFBLElBQUksRUFBRSxJQUZXO0FBR2pCLE1BQUEsV0FBVyxFQUFFLFdBSEk7QUFJakIsTUFBQSxJQUFJLEVBQUU7QUFKVyxLQUFyQjs7QUFPQSwwQkFBSyxZQUFMLENBQWtCLGNBQWxCLEVBQ0MsSUFERCxDQUNPLE1BQUs7QUFDWix5QkFBVSxXQUFWO0FBQ0MsS0FIRDtBQUlILEdBbkJrQjs7QUF1Qm5CLEVBQUEsY0FBYyxHQUFHO0FBQ2IsUUFBSSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsTUFBTixDQUFhLEVBQWIsQ0FBZ0IsS0FBaEIsQ0FBc0IsSUFBdEIsRUFBNEIsQ0FBNUIsQ0FBdkI7O0FBQ1EsMEJBQUssY0FBTCxDQUFvQixnQkFBcEIsRUFDQyxJQURELENBQ00sTUFBTTtBQUNSLDBCQUFXLFFBQVg7O0FBQ0EsMEJBQVcsbUJBQVg7QUFDSCxLQUpEO0FBS1gsR0E5QmtCOztBQWdDbkIsRUFBQSxZQUFZLEdBQUk7QUFDWixRQUFJLE9BQU8sQ0FBQyxrQ0FBRCxDQUFYLEVBQWlEO0FBQzdDLE1BQUEsY0FBYyxDQUFDLGNBQWY7QUFDSCxLQUZELE1BRU8sQ0FDTjtBQUNKOztBQXJDa0IsQ0FBdkI7ZUEyQ2UsYzs7Ozs7O0FDL0NmOzs7O0FBQ0Esb0JBQWdCLFFBQWhCOztBQUNBLG9CQUFnQixtQkFBaEIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJpbXBvcnQgaW50ZXJlc3RCdWlsZGVyIGZyb20gXCIuL0RvbUJ1aWxkZXJcIlxuaW1wb3J0IGRhdGEgZnJvbSBcIi4vSW50ZXJlc3REYXRhXCJcbmNvbnN0IERPTWFwcGVuZCA9IHtcbiAgICBhcHBlbmRUb0RPTSgpIHtcbiAgICAgICAgZGF0YS5nZXRBbGxJbnRlcmVzdCgpXG4gICAgICAgIC50aGVuIChpbnRlcmVzdHMgPT4ge1xuXG4gICAgICAgICAgICBsZXQgcGxhY2VzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5vdXRwdXRcIik7XG4gICAgICAgICAgICBsZXQgaW50ZXJlc3RGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gICAgICAgICAgICBpbnRlcmVzdHMuZm9yRWFjaChpbnRlcmVzdCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaW50ZXJlc3RzKVxuICAgICAgICAgICAgICAgIGxldCBpbnRlcmVzdEhUTUwgPSBpbnRlcmVzdEJ1aWxkZXIuaW50ZXJlc3REb20oaW50ZXJlc3QpO1xuICAgICAgICAgICAgICAgIGludGVyZXN0RnJhZy5hcHBlbmRDaGlsZChpbnRlcmVzdEhUTUwpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHdoaWxlIChwbGFjZXNDb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHBsYWNlc0NvbnRhaW5lci5yZW1vdmVDaGlsZChwbGFjZXNDb250YWluZXIuZmlyc3RDaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBsYWNlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChpbnRlcmVzdEZyYWcpO1xuICAgICAgICB9KVxuICAgIH1cbn1cblxuXG5cbmV4cG9ydCBkZWZhdWx0IERPTWFwcGVuZDsiLCJpbXBvcnQgZGF0YSBmcm9tIFwiLi9JbnRlcmVzdERhdGFcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9ldmVudExpc3RlbmVyXCJcbmltcG9ydCBET01hcHBlbmQgZnJvbSBcIi4vRG9tQXBwZW5kXCJcblxuXG5jb25zdCBpbnRlcmVzdEJ1aWxkZXIgPSB7XG4gICAgcGFnZUxvYWQoKSB7XG4gICAgICAgIGxldCBvdXRwdXRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmlucHV0XCIpXG4gICAgICAgIG91dHB1dENvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBsZXQgaW50ZXJlc3RGb3JtQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNvbnRhaW5lclwiKVxuICAgICAgICBpbnRlcmVzdEZvcm1Db250YWluZXIuY2xhc3NMaXN0LmFkZChcImludGVyZXN0Q29udGFpbmVyRm9ybVwiKTtcbiAgICAgICAgaW50ZXJlc3RGb3JtQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPGgyIGNsYXNzPSdpbnRlcmVzdEZvcm1IZWFkZXInPkFkZCBZb3VyIEludGVyZXN0PC9oMj5cIiA7XG4gICAgICAgIG91dHB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChpbnRlcmVzdEZvcm1Db250YWluZXIpXG5cbiAgICAgICAgbGV0IHBsYWNlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNvbnRhaW5lclwiKVxuICAgICAgICBwbGFjZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwicGxhY2VzQ29udGFpbmVyXCIpXG4gICAgICAgIG91dHB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChwbGFjZUNvbnRhaW5lcilcblxuICAgICAgICBET01hcHBlbmQuYXBwZW5kVG9ET00oKTtcblxuICAgIH0sXG4gICAgaW50ZXJlc3RGb3JtQ3JlYXRlcigpIHtcbiAgICAgICAgZGF0YS5nZXRQbGFjZXMoKVxuICAgICAgICAgICAgLnRoZW4ocGxhY2VzID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaW50ZXJlc3RGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBpbnRlcmVzdEZvcm0uY2xhc3NMaXN0LmFkZChcImludGVyZXN0Rm9ybVwiKVxuICAgICAgICAgICAgICAgIGxldCBpbnRlcmVzdEZvcm1Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmludGVyZXN0Q29udGFpbmVyRm9ybVwiKVxuICAgICAgICAgICAgICAgIGludGVyZXN0Rm9ybUNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnRlcmVzdEZvcm0pXG5cbiAgICAgICAgICAgICAgICBsZXQgaW50ZXJlc3ROYW1lSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgbGV0IGludGVyZXN0TmFtZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuXG4gICAgICAgICAgICAgICAgaW50ZXJlc3ROYW1lTGFiZWwudGV4dENvbnRlbnQgPSBcIkludGVyZXN0IE5hbWU6XCJcbiAgICAgICAgICAgICAgICBpbnRlcmVzdE5hbWVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgICAgICAgICBpbnRlcmVzdE5hbWVJbnB1dC5jbGFzc0xpc3QuYWRkKFwiaW50ZXJlc3ROYW1lXCIpO1xuICAgICAgICAgICAgICAgIGludGVyZXN0Rm9ybS5hcHBlbmRDaGlsZChpbnRlcmVzdE5hbWVMYWJlbCk7XG4gICAgICAgICAgICAgICAgaW50ZXJlc3RGb3JtLmFwcGVuZENoaWxkKGludGVyZXN0TmFtZUlucHV0KTtcblxuXG5cbiAgICAgICAgICAgICAgICBsZXQgaW50ZXJlc3REZXNjcmlwdGlvbklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXG4gICAgICAgICAgICAgICAgbGV0IGludGVyZXN0RGVzY3JpcHRpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgICAgICAgICBpbnRlcmVzdERlc2NyaXB0aW9uTGFiZWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgICAgICAgICAgaW50ZXJlc3REZXNjcmlwdGlvbklucHV0LmNsYXNzTGlzdC5hZGQoXCJpbnRlcmVzdERlc2NyaXB0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGludGVyZXN0RGVzY3JpcHRpb25MYWJlbC50ZXh0Q29udGVudCA9IFwiRGVzY3JpcHRpb246XCJcbiAgICAgICAgICAgICAgICBpbnRlcmVzdEZvcm0uYXBwZW5kQ2hpbGQoaW50ZXJlc3REZXNjcmlwdGlvbkxhYmVsKVxuICAgICAgICAgICAgICAgIGludGVyZXN0Rm9ybS5hcHBlbmRDaGlsZChpbnRlcmVzdERlc2NyaXB0aW9uSW5wdXQpXG5cblxuXG4gICAgICAgICAgICAgICAgbGV0IGNvc3RJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuICAgICAgICAgICAgICAgIGxldCBjb3N0TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIilcbiAgICAgICAgICAgICAgICBjb3N0SW5wdXQuY2xhc3NMaXN0LmFkZChcImludGVyZXN0Q29zdFwiKVxuICAgICAgICAgICAgICAgIGNvc3RMYWJlbC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIGNvc3RMYWJlbC50ZXh0Q29udGVudCA9IFwiQ29zdDpcIlxuICAgICAgICAgICAgICAgIGludGVyZXN0Rm9ybS5hcHBlbmRDaGlsZChjb3N0TGFiZWwpXG4gICAgICAgICAgICAgICAgaW50ZXJlc3RGb3JtLmFwcGVuZENoaWxkKGNvc3RJbnB1dClcblxuXG4gICAgICAgICAgICAgICAgbGV0IHBsYWNlRHJvcERvd24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgcGxhY2VEcm9wRG93bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm15U2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgbGV0IExvbmRvbk9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIilcbiAgICAgICAgICAgICAgICBMb25kb25PcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgYCR7cGxhY2VzWzBdLmlkfWApXG4gICAgICAgICAgICAgICAgTG9uZG9uT3B0aW9uLnRleHRDb250ZW50ID0gYCR7cGxhY2VzWzBdLm5hbWV9YFxuXG5cbiAgICAgICAgICAgICAgICBsZXQgcGFyaXNPcHRpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKVxuICAgICAgICAgICAgICAgIHBhcmlzT3B0aW9ucy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBgJHtwbGFjZXNbMV0uaWR9YClcbiAgICAgICAgICAgICAgICBwYXJpc09wdGlvbnMudGV4dENvbnRlbnQgPSBgJHtwbGFjZXNbMV0ubmFtZX1gXG5cblxuICAgICAgICAgICAgICAgIGxldCBiZXJsaW5PcHRpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKVxuICAgICAgICAgICAgICAgIGJlcmxpbk9wdGlvbnMuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgYCR7cGxhY2VzWzJdLmlkfWApXG4gICAgICAgICAgICAgICAgYmVybGluT3B0aW9ucy50ZXh0Q29udGVudCA9IGAke3BsYWNlc1syXS5uYW1lfWBcblxuXG5cbiAgICAgICAgICAgICAgICBwbGFjZURyb3BEb3duLmFwcGVuZENoaWxkKExvbmRvbk9wdGlvbilcbiAgICAgICAgICAgICAgICBwbGFjZURyb3BEb3duLmFwcGVuZENoaWxkKHBhcmlzT3B0aW9ucylcbiAgICAgICAgICAgICAgICBwbGFjZURyb3BEb3duLmFwcGVuZENoaWxkKGJlcmxpbk9wdGlvbnMpXG4gICAgICAgICAgICAgICAgaW50ZXJlc3RGb3JtLmFwcGVuZENoaWxkKHBsYWNlRHJvcERvd24pXG5cbiAgICAgICAgICAgICAgICBsZXQgaW50ZXJlc3RTYXZlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxuICAgICAgICAgICAgICAgIGludGVyZXN0U2F2ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImludGVyZXN0U2F2ZUJ1dHRvblwiKVxuICAgICAgICAgICAgICAgIGludGVyZXN0U2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwic2F2ZVwiXG4gICAgICAgICAgICAgICAgaW50ZXJlc3RGb3JtLmFwcGVuZENoaWxkKGludGVyZXN0U2F2ZUJ1dHRvbik7XG5cblxuICAgICAgICAgICAgICAgIGludGVyZXN0U2F2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnRMaXN0ZW5lcnMuaW50ZXJlc3RTYXZlKVxuXG4gICAgICAgICAgICB9KVxuICAgIH0sXG4gICAgaW50ZXJlc3REb20odmFsdWUpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2codmFsdWUpXG4gICAgICAgIGxldCBpbnRlcmVzdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjb250YWluZXJcIik7XG4gICAgICAgIGludGVyZXN0Q29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIGBpbnRlcmVzdC0tJHt2YWx1ZS5pZH1gKTtcblxuICAgICAgICAvLyBsZXQgcGxhY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIilcbiAgICAgICAgLy8gcGxhY2UuaW5uZXJIVE1MID0gYFBsYWNlOiA8cD4ke3ZhbHVlLm5hbWV9PC9wPmBcbiAgICAgICAgLy8gaW50ZXJlc3RDb250YWluZXIuYXBwZW5kQ2hpbGQocGxhY2UpXG5cbiAgICAgICAgbGV0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIilcbiAgICAgICAgbmFtZS5pbm5lckhUTUwgPSBgbmFtZTogPHA+JHt2YWx1ZS5uYW1lfTwvcD5gXG4gICAgICAgIGludGVyZXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKG5hbWUpXG5cbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpXG4gICAgICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IGBkZXNjcmlwdGlvbjogPHA+JHt2YWx1ZS5kZXNjcmlwdGlvbn08L3A+YFxuICAgICAgICBpbnRlcmVzdENvbnRhaW5lci5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbilcblxuXG4gICAgICAgIGxldCBjb3N0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICAgICAgY29zdC5pbm5lckhUTUwgPSBgY29zdDogPHA+JHt2YWx1ZS5jb3N0fTwvcD5gXG4gICAgICAgIGludGVyZXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvc3QpXG4gICAgICAgIGxldCBwbGFjZUlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICAgICAgcGxhY2VJZC5pbm5lckhUTUwgPSBgcGxhY2U6IDxwPiAke3ZhbHVlLnBsYWNlSWR9YFxuICAgICAgICBpbnRlcmVzdENvbnRhaW5lci5hcHBlbmRDaGlsZChwbGFjZUlkKVxuXG4gICAgICAgIGxldCBpbnRlcmVzdEVkaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpXG4gICAgICAgIGludGVyZXN0RWRpdEJ1dHRvbi5pbm5lclRleHQgPSBcIkVkaXRcIlxuICAgICAgICBpbnRlcmVzdEVkaXRCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgYGludGVyZXN0ZWRpdC0tJHt2YWx1ZS5pZH1gKVxuICAgICAgICBsZXQgaW50ZXJlc3REZWxldGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpXG4gICAgICAgIGludGVyZXN0RGVsZXRlQnV0dG9uLmlubmVyVGV4dCA9IFwiRGVsZXRlXCI7XG4gICAgICAgIGludGVyZXN0RGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIGBpbnRlcmVzdC0tJHt2YWx1ZS5pZH1gKVxuICAgICAgICBpbnRlcmVzdENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaW50ZXJlc3RDb250YWluZXJcIilcbiAgICAgICAgaW50ZXJlc3REZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2ZW50TGlzdGVuZXJzLmRlbGV0ZVByb21wdClcbiAgICAgICAgaW50ZXJlc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoaW50ZXJlc3RFZGl0QnV0dG9uKVxuICAgICAgICBpbnRlcmVzdENvbnRhaW5lci5hcHBlbmRDaGlsZChpbnRlcmVzdERlbGV0ZUJ1dHRvbilcblxuICAgICAgICBsZXQgYnJlYWtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaHJcIilcbiAgICAgICAgaW50ZXJlc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoYnJlYWtUYWcpO1xuXG4gICAgICAgIGRhdGEuZ2V0QWxsSW50ZXJlc3QoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGludGVyZXN0RWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdEJ1aWxkZXIuaW50ZXJlc3RFZGl0Rm9ybShJREJDdXJzb3JXaXRoVmFsdWUpXG5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGludGVyZXN0Q29udGFpbmVyO1xuICAgIH0sXG4gICAgaW50ZXJlc3RFZGl0Rm9ybSgpIHtcbiAgICAgICAgbGV0IGludGVyZXN0RWRpdElkID0gZXZlbnQudGFyZ2V0LmlkO1xuICAgICAgICBsZXQgaW50ZXJlc3RJZCA9IGludGVyZXN0RWRpdElkLnNwbGl0KFwiLS1cIilbMV1cblxuICAgICAgICBsZXQgY29zdEVkaXRmaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuICAgICAgICBjb3N0RWRpdGZpZWxkLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpXG4gICAgICAgIGNvc3RFZGl0ZmllbGQuY2xhc3NMaXN0LmFkZChcImNvc3RFZGl0RmllbGRcIilcbiAgICAgICAgbGV0IGNvc3RFZGl0TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIilcbiAgICAgICAgY29zdEVkaXRMYWJlbC50ZXh0Q29udGVudCA9IFwiY29zdDpcIlxuXG4gICAgICAgIGxldCByZXZpZXdFZGl0RmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIilcbiAgICAgICAgcmV2aWV3RWRpdEZpZWxkLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpXG4gICAgICAgIHJldmlld0VkaXRGaWVsZC5jbGFzc0xpc3QuYWRkKFwicmV2aWV3RWRpdEZpZWxkXCIpXG4gICAgICAgIGxldCByZXZpZXdFZGl0TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIilcbiAgICAgICAgcmV2aWV3RWRpdExhYmVsLnRleHRDb250ZW50ID0gXCJFZGl0IHJldmlldzpcIlxuXG5cbiAgICAgICAgbGV0IHNhdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpXG4gICAgICAgIHNhdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVcIlxuICAgICAgICBkYXRhLmdldEludGVyZXN0KGludGVyZXN0SWQpXG4gICAgICAgICAgICAudGhlbihpbnRlcmVzdElkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpbnRlcmVzdElkKVxuXG4gICAgICAgICAgICAgICAgbGV0IGNvc3RFZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb3N0RWRpdEZpZWxkXCIpLnZhbHVlXG4gICAgICAgICAgICAgICAgbGV0IHJldmlld0VkaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJldmlld0VkaXRGaWVsZFwiKS52YWx1ZVxuICAgICAgICAgICAgICAgIHNhdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICBsZXQgY29zdElkID0gaW50ZXJlc3RJZC5jb3N0XG4gICAgICAgICAgICAgICAgICAgbGV0IGRlc2NyaXB0aW9uSWQgPSBpbnRlcmVzdElkLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGxhY2VJZCA9IGludGVyZXN0SWQucGxhY2VJZDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBpbnRlcmVzdElkLm5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGVkaXRlZEludGVyZXN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VJZDogcGxhY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvc3Q6IGNvc3RJZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZWRpdEludGVyZXN0KGludGVyZXN0c0lkLCBlZGl0ZWRJbnRlcmVzdClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBET01FYXBwZW5kLmFwcGVuZFRvRG9tKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgbGV0IGludGVyZXN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2ludGVyZXN0LS0ke2ludGVyZXN0SWR9YClcbiAgICAgICAgaW50ZXJlc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY29zdEVkaXRMYWJlbClcbiAgICAgICAgaW50ZXJlc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY29zdEVkaXRmaWVsZClcbiAgICAgICAgaW50ZXJlc3RDb250YWluZXIuYXBwZW5kQ2hpbGQocmV2aWV3RWRpdExhYmVsKVxuICAgICAgICBpbnRlcmVzdENvbnRhaW5lci5hcHBlbmRDaGlsZChyZXZpZXdFZGl0RmllbGQpXG4gICAgICAgIGludGVyZXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHNhdmVCdXR0b24pXG5cbiAgICB9XG59XG5cblxuXG5cbmV4cG9ydCBkZWZhdWx0IGludGVyZXN0QnVpbGRlciIsImNvbnN0IGRhdGEgPSB7XG5cbiAgICBnZXRQbGFjZXMoKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6ODA4OC9wbGFjZXNcIilcbiAgICAgICAgLnRoZW4ocmVzcG9uc2U9PnJlc3BvbnNlLmpzb24oKSlcbiAgICB9LFxuXG4gICAgcG9zdEludGVyZXN0KG9iamVjdCkge1xuICAgICAgICByZXR1cm4gZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjgwODgvaW50ZXJlc3RzXCIsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShvYmplY3QpXG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIGdldEFsbEludGVyZXN0KCkge1xuICAgICAgICByZXR1cm4gZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjgwODgvaW50ZXJlc3RzL1wiKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgfSxcblxuICAgIGRlbGV0ZUludGVyZXN0KGludGVyZXN0SWQpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjgwODgvaW50ZXJlc3RzLyR7aW50ZXJlc3RJZH1gLCB7XG4gICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIGdldEludGVyZXN0KGlkKSB7XG4gICAgICAgcmV0dXJuIGZldGNoIChgaHR0cDovL2xvY2FsaG9zdDo4MDg4L2ludGVyZXN0cy8ke2lkfWApXG4gICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgIH0sXG5cbiAgICBlZGl0SW50ZXJlc3QgKGlkLCBkZXNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4OC9pbnRlcmVzdHMvJHtpZH1gLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkZXNjcmlwdGlvbilcbn0pXG59XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRhdGE7IiwiaW1wb3J0IGRhdGEgZnJvbSBcIi4vSW50ZXJlc3REYXRhXCI7XG5pbXBvcnQgRE9NYXBwZW5kIGZyb20gXCIuL0RvbUFwcGVuZFwiO1xuaW1wb3J0IERPTWJ1aWxkZXIgZnJvbSBcIi4vRG9tQnVpbGRlclwiO1xuXG5jb25zdCBldmVudExpc3RlbmVycyA9IHtcblxuICAgIGludGVyZXN0U2F2ZSgpIHtcbiAgICAgICAgbGV0IG5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmludGVyZXN0TmFtZVwiKS52YWx1ZTtcbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbnRlcmVzdERlc2NyaXB0aW9uXCIpLnZhbHVlXG4gICAgICAgIGxldCBjb3N0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbnRlcmVzdENvc3RcIikudmFsdWVcbiAgICAgICAgbGV0IHBsYWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNteVNlbGVjdFwiKS52YWx1ZVxuY29uc29sZS5sb2cocGxhY2UpXG4gICAgICAgIGxldCBpbnRlcmVzdE9iamVjdCA9IHtcbiAgICAgICAgICAgIHBsYWNlSWQ6IHBsYWNlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGNvc3Q6IGNvc3QsXG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnBvc3RJbnRlcmVzdChpbnRlcmVzdE9iamVjdClcbiAgICAgICAgLnRoZW4gKCgpPT4ge1xuICAgICAgICBET01hcHBlbmQuYXBwZW5kVG9ET00oKVxuICAgICAgICB9KVxuICAgIH0sXG5cblxuXG4gICAgaW50ZXJlc3REZWxldGUoKSB7XG4gICAgICAgIGxldCBJbnRlcmVzdERlbGV0ZUlkID0gZXZlbnQudGFyZ2V0LmlkLnNwbGl0KFwiLS1cIilbMV1cbiAgICAgICAgICAgICAgICBkYXRhLmRlbGV0ZUludGVyZXN0KEludGVyZXN0RGVsZXRlSWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBET01idWlsZGVyLnBhZ2VMb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIERPTWJ1aWxkZXIuaW50ZXJlc3RGb3JtQ3JlYXRvcigpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgfSxcblxuICAgIGRlbGV0ZVByb21wdCAoKSB7XG4gICAgICAgIGlmIChjb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZT9cIikpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJzLmludGVyZXN0RGVsZXRlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5cblxuZXhwb3J0IGRlZmF1bHQgZXZlbnRMaXN0ZW5lcnMiLCJpbXBvcnQgaW50ZXJlc3RCdWlsZGVyIGZyb20gXCIuL0RvbUJ1aWxkZXJcIlxuaW50ZXJlc3RCdWlsZGVyLnBhZ2VMb2FkKClcbmludGVyZXN0QnVpbGRlci5pbnRlcmVzdEZvcm1DcmVhdGVyKCkiXX0=

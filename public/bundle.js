(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DomBuilder = _interopRequireDefault(require("./DomBuilder"));

var _InterestData = _interopRequireDefault(require("./InterestData"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DOMappend = {
  appendToDOM() {
    _InterestData.default.getAllInterest().then(interests => {
      let placesContainer = document.querySelector(".output");
      let interestFrag = document.createDocumentFragment();
      interests.forEach(interest => {
        // console.log(interests)
        let interestHTML = _DomBuilder.default.interestDom(interest);

        interestFrag.appendChild(interestHTML);
      });

      while (placesContainer.firstChild) {
        placesContainer.removeChild(placesContainer.firstChild);
      }

      placesContainer.appendChild(interestFrag);
    });
  }

};
var _default = DOMappend;
exports.default = _default;

},{"./DomBuilder":2,"./InterestData":3}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InterestData = _interopRequireDefault(require("./InterestData"));

var _eventListener = _interopRequireDefault(require("./eventListener"));

var _DomAppend = _interopRequireDefault(require("./DomAppend"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interestBuilder = {
  pageLoad() {
    let outputContainer = document.querySelector(".input");
    outputContainer.innerHTML = "";
    let interestFormContainer = document.createElement("container");
    interestFormContainer.classList.add("interestContainerForm");
    interestFormContainer.innerHTML = "<h2 class='interestFormHeader'>Add Your Interest</h2>";
    outputContainer.appendChild(interestFormContainer);
    let placeContainer = document.createElement("container");
    placeContainer.classList.add("placesContainer");
    outputContainer.appendChild(placeContainer);

    _DomAppend.default.appendToDOM();
  },

  interestFormCreater() {
    _InterestData.default.getPlaces().then(places => {
      let interestForm = document.createElement("div");
      interestForm.classList.add("interestForm");
      let interestFormContainer = document.querySelector(".interestContainerForm");
      interestFormContainer.appendChild(interestForm);
      let interestNameInput = document.createElement("input");
      let interestNameLabel = document.createElement("label");
      interestNameLabel.textContent = "Interest Name:";
      interestNameInput.setAttribute("type", "text");
      interestNameInput.classList.add("interestName");
      interestForm.appendChild(interestNameLabel);
      interestForm.appendChild(interestNameInput);
      let interestDescriptionInput = document.createElement("input");
      let interestDescriptionLabel = document.createElement("label");
      interestDescriptionLabel.setAttribute("type", "text");
      interestDescriptionInput.classList.add("interestDescription");
      interestDescriptionLabel.textContent = "Description:";
      interestForm.appendChild(interestDescriptionLabel);
      interestForm.appendChild(interestDescriptionInput);
      let costInput = document.createElement("input");
      let costLabel = document.createElement("label");
      costInput.classList.add("interestCost");
      costLabel.setAttribute("type", "text");
      costLabel.textContent = "Cost:";
      interestForm.appendChild(costLabel);
      interestForm.appendChild(costInput);
      let placeDropDown = document.createElement("select");
      placeDropDown.setAttribute("id", "mySelect");
      let LondonOption = document.createElement("option");
      LondonOption.setAttribute("value", `${places[0].id}`);
      LondonOption.textContent = `${places[0].name}`;
      let parisOptions = document.createElement("option");
      parisOptions.setAttribute("value", `${places[1].id}`);
      parisOptions.textContent = `${places[1].name}`;
      let berlinOptions = document.createElement("option");
      berlinOptions.setAttribute("value", `${places[2].id}`);
      berlinOptions.textContent = `${places[2].name}`;
      placeDropDown.appendChild(LondonOption);
      placeDropDown.appendChild(parisOptions);
      placeDropDown.appendChild(berlinOptions);
      interestForm.appendChild(placeDropDown);
      let interestSaveButton = document.createElement("button");
      interestSaveButton.setAttribute("class", "interestSaveButton");
      interestSaveButton.textContent = "save";
      interestForm.appendChild(interestSaveButton);
      interestSaveButton.addEventListener("click", _eventListener.default.interestSave);
    });
  },

  interestDom(value) {
    // console.log(value)
    let interestContainer = document.createElement("container");
    interestContainer.setAttribute("id", `interest--${value.id}`); // let place = document.createElement("h2")
    // place.innerHTML = `Place: <p>${value.name}</p>`
    // interestContainer.appendChild(place)

    let name = document.createElement("h3");
    name.innerHTML = `name: <p>${value.name}</p>`;
    interestContainer.appendChild(name);
    let description = document.createElement("h3");
    description.innerHTML = `description: <p>${value.description}</p>`;
    interestContainer.appendChild(description);
    let cost = document.createElement("p");
    cost.innerHTML = `cost: <p>${value.cost}</p>`;
    interestContainer.appendChild(cost);
    let placeId = document.createElement("p");
    placeId.innerHTML = `place: <p> ${value.placeId}`;
    interestContainer.appendChild(placeId);
    let interestEditButton = document.createElement("button");
    interestEditButton.innerText = "Edit";
    interestEditButton.setAttribute("id", `interestedit--${value.id}`);
    let interestDeleteButton = document.createElement("button");
    interestDeleteButton.innerText = "Delete";
    interestDeleteButton.setAttribute("id", `interest--${value.id}`);
    interestContainer.classList.add("interestContainer");
    interestDeleteButton.addEventListener("click", _eventListener.default.deletePrompt);
    interestContainer.appendChild(interestEditButton);
    interestContainer.appendChild(interestDeleteButton);
    let breakTag = document.createElement("hr");
    interestContainer.appendChild(breakTag);

    _InterestData.default.getAllInterest().then(() => {
      interestEditButton.addEventListener("click", () => {
        interestBuilder.interestEditForm(IDBCursorWithValue);
      });
    });

    return interestContainer;
  },

  interestEditForm() {
    let interestEditId = event.target.id;
    let interestId = interestEditId.split("--")[1];
    let costEditfield = document.createElement("input");
    costEditfield.setAttribute("type", "text");
    costEditfield.classList.add("costEditField");
    let costEditLabel = document.createElement("label");
    costEditLabel.textContent = "cost:";
    let reviewEditField = document.createElement("input");
    reviewEditField.setAttribute("type", "text");
    reviewEditField.classList.add("reviewEditField");
    let reviewEditLabel = document.createElement("label");
    reviewEditLabel.textContent = "Edit review:";
    let saveButton = document.createElement("button");
    saveButton.textContent = "Save";

    _InterestData.default.getInterest(interestId).then(interestId => {
      console.log(interestId);
      costEditfield.value = cost.value;
      reviewEditField.value = description.value;
      saveButton.addEventListener("click", () => {
        let placeId = interests.placeId;
        let name = interests.name;
        let description = interests.description;
        let editedInterest = {
          placeId: placeDropDown.value,
          name: name,
          description: description,
          cost: costEditfield.value
        };

        _InterestData.default.editInterest(interest.id, editedInterest).then(() => {
          DOMEappend.appendToDom();
        });
      });
    });

    let interestContainer = document.querySelector(`#interest--${interestId}`);
    interestContainer.appendChild(costEditLabel);
    interestContainer.appendChild(costEditfield);
    interestContainer.appendChild(reviewEditLabel);
    interestContainer.appendChild(reviewEditField);
    interestContainer.appendChild(saveButton);
  }

};
var _default = interestBuilder;
exports.default = _default;

},{"./DomAppend":1,"./InterestData":3,"./eventListener":4}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const data = {
  getPlaces() {
    return fetch("http://localhost:8088/places").then(response => response.json());
  },

  postInterest(object) {
    return fetch("http://localhost:8088/interests", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(object)
    });
  },

  getAllInterest() {
    return fetch("http://localhost:8088/interests/").then(response => response.json());
  },

  deleteInterest(interestId) {
    return fetch(`http://localhost:8088/interests/${interestId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  getInterest(id) {
    return fetch(`http://localhost:8088/interests/${id}`).then(response => response.json());
  },

  editInterest(id, description) {
    return fetch(`http://localhost:8088/interests/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(description)
    });
  }

};
var _default = data;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InterestData = _interopRequireDefault(require("./InterestData"));

var _DomAppend = _interopRequireDefault(require("./DomAppend"));

var _DomBuilder = _interopRequireDefault(require("./DomBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventListeners = {
  interestSave() {
    let name = document.querySelector(".interestName").value;
    let description = document.querySelector(".interestDescription").value;
    let cost = document.querySelector(".interestCost").value;
    let place = document.querySelector("#mySelect").value;
    console.log(place);
    let interestObject = {
      placeId: place,
      name: name,
      description: description,
      cost: cost
    };

    _InterestData.default.postInterest(interestObject).then(() => {
      _DomAppend.default.appendToDOM();
    });
  },

  interestDelete() {
    let InterestDeleteId = event.target.id.split("--")[1];

    _InterestData.default.deleteInterest(InterestDeleteId).then(() => {
      _DomBuilder.default.onPageLoad();

      _DomBuilder.default.interestFormCreator();
    });
  },

  deletePrompt() {
    if (confirm("Are you sure you want to delete?")) {
      eventListeners.interestDelete();
    } else {}
  }

};
var _default = eventListeners;
exports.default = _default;

},{"./DomAppend":1,"./DomBuilder":2,"./InterestData":3}],5:[function(require,module,exports){
"use strict";

var _DomBuilder = _interopRequireDefault(require("./DomBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_DomBuilder.default.pageLoad();

_DomBuilder.default.interestFormCreater();

},{"./DomBuilder":2}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
